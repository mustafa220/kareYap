
/*
  @author Raoul Harel
  @license The MIT license (../LICENSE.txt)
  @copyright 2015 Raoul Harel
  @url rharel/node-avl-tree on GitHub
 */

(function() {
  var AVLTree, should;

  should = require('should');

  AVLTree = require('../lib/avl');

  describe('readme', function() {
    describe('creation', function() {
      var t;
      t = new AVLTree();
      return it('should be empty', function() {
        t.is_empty().should.be.equal(true);
        return (t.root != null).should.be.equal(false);
      });
    });
    describe('insertion', function() {
      var k, n, t, v;
      t = new AVLTree();
      k = 1;
      v = 'hello';
      n = t.insert(k, v);
      it('should match key and value', function() {
        n.key.should.be.equal(k);
        return n.value.should.be.equal(v);
      });
      return it('should become the root', function() {
        return t.root.should.be.equal(n);
      });
    });
    describe('search', function() {
      var a, b, t;
      t = new AVLTree();
      a = t.insert(1, 'hello');
      b = t.insert(2, 'world');
      return it('should return value', function() {
        t.search(1).should.be.equal(a);
        return t.search(3).should.be.equal(b);
      });
    });
    describe('removal', function() {
      var a, b, t;
      t = new AVLTree();
      a = t.insert(1, 'hello');
      b = t.insert(2, 'world');
      return it('should remove and invalidate', function() {
        a.is_valid().should.be.equal(true);
        t.remove(1).should.be.equal('hello');
        a.is_valid().should.be.equal(false);
        b.is_valid().should.be.equal(true);
        b.remove().should.be.equal('world');
        return b.is_valid().should.be.equal(false);
      });
    });
    return describe('example: sorting', function() {
      var result, t;
      t = new AVLTree();
      t.insert(2, 'world');
      t.insert(6, 'day');
      t.insert(5, 'beautiful');
      t.insert(3, 'what');
      t.insert(1, 'hello');
      t.insert(4, 'a');
      result = [];
      while (!t.is_empty()) {
        result.push(t.search(0).remove());
      }
      return it('should sort ascending', function() {
        return result.join().should.be.equal('hello world what a beautiful day');
      });
    });
  });

}).call(this);

//# sourceMappingURL=readme.test.js.map
