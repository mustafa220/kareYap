
/*
  @author Raoul Harel
  @license The MIT license (../LICENSE.txt)
  @copyright 2015 Raoul Harel
  @url rharel/node-avl-tree on GitHub
 */

(function() {
  exports.it_should_be_empty = function(tree) {
    it('should have no root', function() {
      return (tree.root != null).should.be.equal(false);
    });
    return it('should be empty', function() {
      return tree.is_empty().should.be.equal(true);
    });
  };

  exports.it_should_match_key_and_value = function(node, key, value) {
    it('should match the key', function() {
      return node.key.should.be.equal(key);
    });
    return it('should match the value', function() {
      return node.value.should.be.equal(value);
    });
  };

  exports.it_should_be_a_leaf = function(node) {
    it('should have no children', function() {
      (node.left() != null).should.be.equal(false);
      return (node.right() != null).should.be.equal(false);
    });
    it('should be aware that it is a leaf', function() {
      return node.is_leaf().should.be.equal(true);
    });
    it('should have expected height', function() {
      return node.height().should.be.equal(1);
    });
    return it('should have expected balance', function() {
      return node.balance().should.be.equal(0);
    });
  };

  exports.it_should_be_the_root = function(node, tree) {
    it('should be set as the root', function() {
      return tree.root.should.be.equal(node);
    });
    it('should have no parent', function() {
      return (node.parent != null).should.be.equal(false);
    });
    return it('should be aware that it is the root', function() {
      return node.is_root().should.be.equal(true);
    });
  };

  exports.it_should_have_children = function(node, L, R) {
    if (L == null) {
      L = null;
    }
    if (R == null) {
      R = null;
    }
    it('should ' + (L != null ? 'have' : 'have no') + ' left child', function() {
      return (node.left() != null).should.be.equal(L != null);
    });
    it('should ' + (R != null ? 'have' : 'have no') + ' right child', function() {
      return (node.right() != null).should.be.equal(R != null);
    });
    if (L != null) {
      it('should have left child know its parent', function() {
        return L.parent.should.be.equal(node);
      });
    }
    if (R != null) {
      it('should have right child know its parent', function() {
        return R.parent.should.be.equal(node);
      });
    }
    if ((L == null) && (R == null)) {
      return it('should be aware that it is a leaf', function() {
        return node.is_leaf().should.be.equal(true);
      });
    } else {
      return it('should be aware that it is not a leaf', function() {
        return node.is_leaf().should.be.equal(false);
      });
    }
  };

  exports.it_should_have_props = function(node, height, balance) {
    it('should have expected height', function() {
      return node.height().should.be.equal(height);
    });
    return it('should have expected balance', function() {
      return node.balance().should.be.equal(balance);
    });
  };

  exports.it_should_be_invalid = function(node) {
    it('should isolate node', function() {
      (node.parent != null).should.be.equal(false);
      (node.left() != null).should.be.equal(false);
      return (node.right() != null).should.be.equal(false);
    });
    it('should invalidate node\'s key', function() {
      return (node.key != null).should.be.equal(false);
    });
    it('should invalidate node\'s value', function() {
      return (node.value != null).should.be.equal(false);
    });
    return it('should have the invalid node flag', function() {
      return node.is_invalid().should.be.equal(true);
    });
  };

  exports.arrays_are_equal = function(a, b) {
    var i, j, ref;
    if (a === b) {
      return true;
    }
    if ((a != null) || (b != null)) {
      return false;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (i = j = 0, ref = a.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  };

}).call(this);

//# sourceMappingURL=helpers.test.js.map
