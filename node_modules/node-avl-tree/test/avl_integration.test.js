
/*
  @author Raoul Harel
  @license The MIT license (../LICENSE.txt)
  @copyright 2015 Raoul Harel
  @url rharel/node-avl-tree on GitHub
 */

(function() {
  var AVLTree, assert, should, shuffle;

  should = require('should');

  shuffle = require('shuffle-array');

  assert = require('./helpers.test');

  AVLTree = require('../lib/avl');

  describe('integration', function() {
    return describe('sorting', function() {
      var j, k, l, m, results, results1, results2, results3, test_case;
      test_case = function(name, comparator, sorted, query) {
        return describe(name, function() {
          var i, j, k, len, result, results, shuffled, t, verbose;
          verbose = false;
          t = new AVLTree(comparator);
          sorted = (function() {
            results = [];
            for (j = 1; j <= 100; j++){ results.push(j); }
            return results;
          }).apply(this);
          shuffled = shuffle(sorted, {
            'copy': true
          });
          for (k = 0, len = shuffled.length; k < len; k++) {
            i = shuffled[k];
            t.insert(i, i);
          }
          if (verbose) {
            console.log('input: ' + shuffled);
          }
          result = [];
          while (!t.is_empty()) {
            if (verbose) {
              console.log(t.root._debug_string() + '***');
            }
            result.push(t.search(query).remove());
          }
          if (verbose) {
            console.log('output: ' + result);
          }
          assert.it_should_be_empty(t);
          return it('should return sorted output', function() {
            return assert.arrays_are_equal(result, sorted);
          });
        });
      };
      test_case('ascending with comparator(a - b)', (function(a, b) {
        return a - b;
      }), (function() {
        results = [];
        for (j = 1; j <= 100; j++){ results.push(j); }
        return results;
      }).apply(this), 0);
      test_case('descending with comparator(a - b)', (function(a, b) {
        return a - b;
      }), (function() {
        results1 = [];
        for (k = 100; k >= 1; k--){ results1.push(k); }
        return results1;
      }).apply(this), 101);
      test_case('ascending with comparator(b - a)', (function(a, b) {
        return b - a;
      }), (function() {
        results2 = [];
        for (l = 100; l >= 1; l--){ results2.push(l); }
        return results2;
      }).apply(this), 0);
      return test_case('descending with comparator(b - a)', (function(a, b) {
        return b - a;
      }), (function() {
        results3 = [];
        for (m = 1; m <= 100; m++){ results3.push(m); }
        return results3;
      }).apply(this), 101);
    });
  });

}).call(this);

//# sourceMappingURL=avl_integration.test.js.map
